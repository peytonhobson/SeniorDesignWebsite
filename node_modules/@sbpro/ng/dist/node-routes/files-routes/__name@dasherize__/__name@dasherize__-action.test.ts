import {
    mockCode,
    mockFastifyInstanceParameter,
    MockFastifyReply,
    mockReply,
    mockRoute,
    requestMockWithParams,
} from '@mocks/fastify';
import { mockFindOne } from '@mocks/typeorm';
import {
    <%= classify(name) %>ActionPayload,
    Test<%= classify(name) %>ActionPayload,
} from '@start-bootstrap/website-shared-types';
import { TestOrganization } from '@testing/objects';
import { FastifyRequest } from 'fastify';

import { handler, <%= camelize(name) %>Action } from './<%= dasherize(name) %>-action';
describe('Payment Start', () => {
    beforeEach(() => {
        mockCode.mockReset();
        (requestMockWithParams as FastifyRequest<{
            Body: <%= classify(name) %>ActionPayload;
        }>).body = new Test<%= classify(name) %>ActionPayload();
    });

    it('should create the <%= camelize(name) %> route', async () => {
        <%= camelize(name) %>Action(mockFastifyInstanceParameter, {});
        expect(mockRoute).toHaveBeenCalled();
    });

    it('should TODO', async () => {
        // mockFindOne.mockImplementation(() => new TestOrganization());
        // const returnValue = await handler.call(
        //     mockFastifyInstanceParameter,
        //     requestMockWithParams as FastifyRequest<{ Body: <%= classify(name) %>Payload }>,
        //     mockReply as MockFastifyReply<{ Body: <%= classify(name) %>Payload }>
        // );
        // expect(mockFindOne).toHaveBeenCalled();
    });
});
