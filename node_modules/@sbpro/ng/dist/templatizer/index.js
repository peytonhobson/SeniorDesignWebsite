"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,a,t,n){void 0===n&&(n=t),Object.defineProperty(e,n,{enumerable:!0,get:function(){return a[t]}})}:function(e,a,t,n){void 0===n&&(n=t),e[n]=a[t]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,a){Object.defineProperty(e,"default",{enumerable:!0,value:a})}:function(e,a){e.default=a}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var a={};if(null!=e)for(var t in e)"default"!==t&&Object.hasOwnProperty.call(e,t)&&__createBinding(a,e,t);return __setModuleDefault(a,e),a},__awaiter=this&&this.__awaiter||function(e,a,t,n){return new(t||(t=Promise))((function(r,s){function o(e){try{l(n.next(e))}catch(e){s(e)}}function i(e){try{l(n.throw(e))}catch(e){s(e)}}function l(e){var a;e.done?r(e.value):(a=e.value,a instanceof t?a:new t((function(e){e(a)}))).then(o,i)}l((n=n.apply(e,a||[])).next())}))},__importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0});const chalk_1=__importDefault(require("chalk")),change_case_1=require("change-case"),commander_1=__importDefault(require("commander")),fs_1=__importDefault(require("fs")),path_1=__importDefault(require("path")),sh=__importStar(require("shelljs"));commander_1.default.requiredOption("-p, --path <path>","path to folder to templatize").requiredOption("-n, --name <name>","name to replace").option("-s, --plural <plural>","pluralized name").parse(process.argv);const options=commander_1.default.opts();options.plural||(options.plural=options.name+"s"),console.log(chalk_1.default.magenta("### INFO: Options:")),console.log(options);const baseDir=path_1.default.resolve(process.cwd(),options.path),baseOutputDir=path_1.default.resolve(process.cwd(),"templatized"),foundFiles=sh.ls("-R",baseDir).stdout.trim().split("\n");function _processedFoundFile(e){const a=new RegExp(change_case_1.paramCase(options.plural),"g"),t=new RegExp(change_case_1.paramCase(options.name),"g");return e.replace(a,"__plural@dasherize__").replace(t,"__name@dasherize__")}function _processFile(e,a){const t=fs_1.default.readFileSync(e,{encoding:"utf8"}).toString().split("\n"),n=[];t.forEach(e=>{e=_processConstantSingular(e=_processConstantPlural(e=_processClassifySingular(e=_processClassifyPlural(e=_processCamelSingular(e=_processCamelPlural(e=_processDasherizeSingular(e=_processDasherizePlural(e)))))))),n.push(e)}),fs_1.default.writeFileSync(a,n.join("\n"),{encoding:"utf8"})}function isDirectory(e){return new Promise((a,t)=>{fs_1.default.stat(e,(e,n)=>{if(e)return t(e);a(n.isDirectory())})})}function _processDasherizePlural(e){const a=new RegExp(`(from './.*)${change_case_1.paramCase(options.plural)}(.*';)`,"g");return e.replace(a,"$1<%= dasherize(plural) %>$2")}function _processDasherizeSingular(e){const a=new RegExp(`(from './.*)${change_case_1.paramCase(options.name)}(.*';)`,"g");return e.replace(a,"$1<%= dasherize(name) %>$2")}function _processCamelPlural(e){const a=new RegExp(change_case_1.camelCase(options.plural),"g");return e.replace(a,"<%= camelize(plural) %>")}function _processCamelSingular(e){const a=new RegExp(change_case_1.camelCase(options.name),"g");return e.replace(a,"<%= camelize(name) %>")}function _processClassifyPlural(e){const a=new RegExp(change_case_1.pascalCase(options.plural),"g");return e.replace(a,"<%= classify(plural) %>")}function _processClassifySingular(e){const a=new RegExp(change_case_1.pascalCase(options.name),"g");return e.replace(a,"<%= classify(name) %>")}function _processConstantPlural(e){const a=new RegExp(change_case_1.constantCase(options.plural),"g");return e.replace(a,"<%= constantCase(plural) %>")}function _processConstantSingular(e){const a=new RegExp(change_case_1.constantCase(options.name),"g");return e.replace(a,"<%= constantCase(name) %>")}console.log(chalk_1.default.magenta("### INFO: Will process the following files:")),console.log(foundFiles),sh.rm("-rf","templatized"),sh.mkdir("-p",baseOutputDir),foundFiles.forEach(e=>__awaiter(void 0,void 0,void 0,(function*(){const a=path_1.default.resolve(baseDir,e),t=path_1.default.resolve(baseOutputDir,_processedFoundFile(e));(yield isDirectory(a))&&sh.mkdir("-p",t)}))),foundFiles.forEach(e=>__awaiter(void 0,void 0,void 0,(function*(){const a=path_1.default.resolve(baseDir,e),t=path_1.default.resolve(baseOutputDir,_processedFoundFile(e)+".txt");(yield isDirectory(a))||_processFile(a,t)})));