import { mockFastifyInstanceParameter, mockReply, mockRoute, requestMock } from '@mocks/fastify';
import { mockFind } from '@mocks/typeorm';
import { Test<%= classify(name) %> } from '@testing/objects';

import { handler, <%= camelize(plural) %>All } from './<%= dasherize(plural) %>-all';

describe('<%= classify(plural) %>All', () => {
    beforeEach(() => {});

    it('should create the <%= camelize(plural) %>All route', async () => {
        <%= camelize(plural) %>All(mockFastifyInstanceParameter, {}, () => {});
        expect(mockRoute).toHaveBeenCalled();
    });

    it('should get all <%= camelize(plural) %>', async () => {
        mockFind.mockImplementation(() => [
            new Test<%= classify(name) %>(),
            new Test<%= classify(name) %>(),
            new Test<%= classify(name) %>(),
        ]);
        const returnValue = await handler.call(
            mockFastifyInstanceParameter,
            requestMock,
            mockReply
        );
        expect(mockFind).toHaveBeenCalled();
        expect(returnValue.length).toEqual(3);
    });
});
