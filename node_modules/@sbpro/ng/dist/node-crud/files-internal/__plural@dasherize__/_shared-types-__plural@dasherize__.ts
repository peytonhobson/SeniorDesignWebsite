import { UUID } from './common';

export interface Results<%= classify(name) %> {
    id: UUID;
    displayName: string;
    orgID: string;
}

/* Create */

export interface Create<%= classify(name) %>Payload {
    displayName: string;
}

export type Create<%= classify(name) %>ErrorCodes = '<%= constantCase(name) %>_ALREADY_EXISTS' | 'ERROR_CREATING_<%= constantCase(name) %>';

/* Read */

export interface Read<%= classify(name) %>Params {
    id: UUID;
}

export type Read<%= classify(name) %>ErrorCodes = '<%= constantCase(name) %>_NOT_FOUND' | 'ERROR_FINDING_<%= constantCase(name) %>';

/* Update */

export interface Update<%= classify(name) %>Params {
    id: UUID;
}

export type Update<%= classify(name) %>Payload = Partial<Create<%= classify(name) %>Payload>;

export type Update<%= classify(name) %>ErrorCodes =
    | '<%= constantCase(name) %>_NOT_FOUND'
    | 'ERROR_FINDING_<%= constantCase(name) %>'
    | 'ERROR_UPDATING_<%= constantCase(name) %>';

/* Delete */

export interface Delete<%= classify(name) %>Params {
    id: UUID;
}

export type Delete<%= classify(name) %>ErrorCodes =
    | '<%= constantCase(name) %>_NOT_FOUND'
    | 'ERROR_FINDING_<%= constantCase(name) %>'
    | 'ERROR_DELETING_<%= constantCase(name) %>';

/*** PLURAL ***/

/* Read */

export interface ReadMultiple<%= classify(plural) %>Payload {
    <%= camelize(name) %>IDs: UUID[];
}

export type ReadMultiple<%= classify(plural) %>ErrorCodes = '<%= constantCase(plural) %>_NOT_FOUND' | 'ERROR_FINDING_<%= constantCase(plural) %>';

/* Delete */

export interface DeleteMultiple<%= classify(plural) %>Payload {
    <%= camelize(name) %>IDs: UUID[];
}

export type DeleteMultiple<%= classify(plural) %>ErrorCodes =
    | '<%= constantCase(plural) %>_NOT_FOUND'
    | 'ERROR_FINDING_<%= constantCase(plural) %>'
    | 'ERROR_DELETING_<%= constantCase(plural) %>';

/* Find */

interface WhereExpression {
    [index: string]: string | number | WhereExpression;
}

export interface Find<%= classify(plural) %>Payload {
    select?: string[];
    relations?: string[];
    where?: WhereExpression[],
    order?: {
        [index: string]: 'ASC' | 'DESC';
    },
    skip?: number;
    take?: number;
}

export type Find<%= classify(plural) %>ErrorCodes = '<%= constantCase(plural) %>_NOT_FOUND' | 'ERROR_FINDING_<%= constantCase(plural) %>';
