import { find<%= classify(name) %> } from '@app/routes/_shared';
import { RouteHandlerMethodForConfig } from '@src/augmentations/fastify';
import { Read<%= classify(name) %>Params, Results<%= classify(name) %> } from '@start-bootstrap/website-shared-types';
import { FastifyPlugin } from 'fastify';

import * as schemas from './_schemas';

export const <%= camelize(plural) %>Read: FastifyPlugin = async function (instance, options): Promise<void> {
    instance.route({
        method: 'GET',
        url: '/:id',
        schema: schemas.<%= camelize(plural) %>Read,
        handler,
    });
};

export const handler: RouteHandlerMethodForConfig<{
    Params: Read<%= classify(name) %>Params;
}> = async function (request, reply): Promise<Results<%= classify(name) %>> {
    const read<%= classify(name) %>Params: Read<%= classify(name) %>Params = request.params;
    const found<%= classify(name) %> = await find<%= classify(name) %>(request, read<%= classify(name) %>Params.id);

    return found<%= classify(name) %>.toResults<%= classify(name) %>();
};

