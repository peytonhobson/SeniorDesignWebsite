import httpCodes from '@inip/http-codes';
import {
    mockCode,
    mockFastifyInstanceParameter,
    MockFastifyReply,
    mockGenerateError,
    mockReply,
    mockRoute,
    requestMock,
    requestMockWithParams,
} from '@mocks/fastify';
import { mockEMSave, mockFindOne } from '@mocks/typeorm';
import {
    Create<%= classify(name) %>Payload,
    TestCreate<%= classify(name) %>Payload,
    TestResults<%= classify(name) %>,
} from '@start-bootstrap/website-shared-types';
import { Test<%= classify(name) %> } from '@testing/objects';
import { FastifyRequest } from 'fastify';

import { handler, <%= camelize(plural) %>Create } from './<%= dasherize(plural) %>-create';

describe('<%= classify(plural) %>Create', () => {
    beforeEach(() => {
        mockFindOne.mockReset();
        (requestMockWithParams as FastifyRequest<{}>).body = new TestCreate<%= classify(name) %>Payload();
    });

    it('should create the <%= camelize(plural) %>Create route', async () => {
        <%= camelize(plural) %>Create(mockFastifyInstanceParameter, {}, () => {});
        expect(mockRoute).toHaveBeenCalled();
    });
    it('should create a <%= camelize(name) %>', async () => {
        mockEMSave.mockImplementation(() => new Test<%= classify(name) %>());
        const returnValue = await handler.call(
            mockFastifyInstanceParameter,
            requestMockWithParams as FastifyRequest<{ Body: Create<%= classify(name) %>Payload }>,
            mockReply as MockFastifyReply<{ Body: Create<%= classify(name) %>Payload }>
        );
        expect(mockCode).toHaveBeenCalledWith(201);
        expect(returnValue).toEqual(new TestResults<%= classify(name) %>());
    });
    it('should catch errors when trying to create <%= camelize(name) %>', async () => {
        const thrownError = new Error('TEST_ERROR');
        mockEMSave.mockImplementation(() => {
            throw thrownError;
        });
        try {
            const returnValue = await handler.call(
                mockFastifyInstanceParameter,
                requestMockWithParams as FastifyRequest<{ Body: Create<%= classify(name) %>Payload }>,
                mockReply as MockFastifyReply<{ Body: Create<%= classify(name) %>Payload }>
            );
        } catch (error) {
            expect(mockGenerateError).toHaveBeenLastCalledWith(
                httpCodes.INTERNAL_SERVER_ERROR,
                'ERROR_CREATING_<%= constantCase(name) %>',
                thrownError
            );
        }
    });
});
