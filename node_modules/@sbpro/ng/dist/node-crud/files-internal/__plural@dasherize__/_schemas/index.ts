import * as globalSchemas from '@app/routes/_schemas';

import * as schemas from './schemas';

export const <%= camelize(plural) %>All = {
    response: {
        200: {
            type: 'array',
            items: schemas.<%= camelize(plural) %>ResponseObjectSchema,
        },
    },
};
export const <%= camelize(plural) %>Create = {
    body: schemas.<%= camelize(plural) %>BodyCreateSchema,
    response: {
        201: schemas.<%= camelize(plural) %>ResponseObjectSchema,
    },
};
export const <%= camelize(plural) %>Delete = {
    params: globalSchemas.paramsIDSchema,
    response: {
        204: {
            description: 'Successfully deleted',
            type: 'null',
        },
    },
};
export const <%= camelize(plural) %>DeleteMultiple = {
    body: schemas.<%= camelize(plural) %>BodyDeleteMultipleSchema,
    response: {
        204: {
            description: 'Successfully deleted',
            type: 'null',
        },
    },
};
export const <%= camelize(plural) %>Read = {
    params: globalSchemas.paramsIDSchema,
    response: {
        200: schemas.<%= camelize(plural) %>ResponseObjectSchema,
    },
};
export const <%= camelize(plural) %>ReadMultiple = {
    body: schemas.<%= camelize(plural) %>BodyReadMultipleSchema,
    response: {
        200: {
            type: 'array',
            items: schemas.<%= camelize(plural) %>ResponseObjectSchema,
        },
    },
};
export const <%= camelize(plural) %>Update = {
    params: globalSchemas.paramsIDSchema,
    body: schemas.<%= camelize(plural) %>BodyUpdateSchema,
    response: {
        200: schemas.<%= camelize(plural) %>ResponseObjectSchema,
    },
};
export const <%= camelize(plural) %>Find = {
    body: schemas.<%= camelize(plural) %>BodyFindSchema,
    response: {
        200: {
            type: 'array',
            items: schemas.<%= camelize(plural) %>ResponseObjectSchema,
        },
    },
};
