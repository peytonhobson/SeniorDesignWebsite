import { find<%= classify(name) %> } from '@app/routes/_shared';
import httpCodes from '@inip/http-codes';
import { <%= classify(name) %> } from '@lib/orm/entity';
import { RouteHandlerMethodForConfig } from '@src/augmentations/fastify';
import {
    Results<%= classify(name) %>,
    Update<%= classify(name) %>ErrorCodes,
    Update<%= classify(name) %>Params,
    Update<%= classify(name) %>Payload,
} from '@start-bootstrap/website-shared-types';
import { FastifyPlugin } from 'fastify';
import { getConnection } from 'typeorm';

import * as schemas from './_schemas';

export const <%= camelize(plural) %>Update: FastifyPlugin = async function (instance, options): Promise<void> {
    instance.route({
        method: 'PUT',
        url: '/:id',
        schema: schemas.<%= camelize(plural) %>Update,
        handler,
    });
};

export const handler: RouteHandlerMethodForConfig<{
    Params: Update<%= classify(name) %>Params;
    Body: Update<%= classify(name) %>Payload;
}> = async function (request, reply): Promise<Results<%= classify(name) %>> {
    const update<%= classify(name) %>Params: Update<%= classify(name) %>Params = request.params;
    const update<%= classify(name) %>Payload: Update<%= classify(name) %>Payload = request.body;
    const <%= camelize(name) %>Repository = getConnection().getRepository(<%= classify(name) %>);
    const found<%= classify(name) %> = await find<%= classify(name) %>(request, update<%= classify(name) %>Params.id);

    Object.assign(found<%= classify(name) %>, update<%= classify(name) %>Payload);

    try {
        await <%= camelize(name) %>Repository.save(found<%= classify(name) %>);
    } catch (error) {
        throw request.generateError<Update<%= classify(name) %>ErrorCodes>(
            httpCodes.INTERNAL_SERVER_ERROR,
            'ERROR_UPDATING_<%= constantCase(name) %>',
            error
        );
    }

    return found<%= classify(name) %>.toResults<%= classify(name) %>();
};
