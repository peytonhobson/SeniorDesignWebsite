import { <%= classify(name) %> } from '@lib/orm/entity';
import { RouteHandlerMethodForConfig } from '@src/augmentations/fastify';
import { Results<%= classify(name) %> } from '@start-bootstrap/website-shared-types';
import { FastifyPlugin } from 'fastify';
import { getConnection } from 'typeorm';

import * as schemas from './_schemas';

export const <%= camelize(plural) %>All: FastifyPlugin = async function (instance, options): Promise<void> {
    instance.route({
        method: 'GET',
        url: '/',
        schema: schemas.<%= camelize(plural) %>All,
        handler,
    });
};

export const handler: RouteHandlerMethodForConfig<{}> = async function (
    request,
    reply
): Promise<Results<%= classify(name) %>[]> {
    const <%= camelize(name) %>Repository = getConnection().getRepository(<%= classify(name) %>);
    const <%= camelize(plural) %> = await <%= camelize(name) %>Repository.find();

    return <%= camelize(plural) %>.map((<%= camelize(name) %>) => <%= camelize(name) %>.toResults<%= classify(name) %>());
};
