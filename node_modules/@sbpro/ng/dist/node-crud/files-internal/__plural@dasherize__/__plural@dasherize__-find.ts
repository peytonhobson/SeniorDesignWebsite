import { find<%= classify(plural) %>Filter } from '@app/routes/_shared';
import { <%= classify(name) %> } from '@lib/orm/entity';
import { RouteHandlerMethodForConfig } from '@src/augmentations/fastify';
import { Find<%= classify(plural) %>Payload } from '@start-bootstrap/website-shared-types';
import { FastifyPlugin } from 'fastify';
import { FindManyOptions } from 'typeorm';

import * as schemas from './_schemas';

export const <%= camelize(plural) %>Find: FastifyPlugin = async function (instance, options): Promise<void> {
    instance.route({
        method: 'POST',
        url: '/find',
        schema: schemas.<%= camelize(plural) %>Find,
        handler,
    });
};

export const handler: RouteHandlerMethodForConfig<{ Body: Find<%= classify(plural) %>Payload }> = async function (
    request,
    reply
): Promise<<%= classify(name) %>[]> {
    const read<%= classify(name) %>Params: Find<%= classify(plural) %>Payload = request.body;

    const found<%= classify(plural) %> = await find<%= classify(plural) %>Filter(
        request,
        read<%= classify(name) %>Params as FindManyOptions<<%= classify(name) %>>
    );

    return found<%= classify(plural) %>;
};
