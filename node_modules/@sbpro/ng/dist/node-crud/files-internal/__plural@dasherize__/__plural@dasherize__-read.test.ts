import { mockFind<%= classify(name) %> } from '@mocks/@app/routes/_shared';
import {
    mockFastifyInstanceParameter,
    MockFastifyReply,
    mockGenerateError,
    mockReply,
    mockRoute,
    requestMockWithParams,
} from '@mocks/fastify';
import {
    Read<%= classify(name) %>Params,
    TestRead<%= classify(name) %>Params,
    TestResults<%= classify(name) %>,
} from '@start-bootstrap/website-shared-types';
import { Test<%= classify(name) %> } from '@testing/objects';
import { FastifyRequest } from 'fastify';

import { handler, <%= camelize(plural) %>Read } from './<%= dasherize(plural) %>-read';

describe('<%= classify(plural) %>Read', () => {
    beforeEach(() => {
        mockFind<%= classify(name) %>.mockReset();
        mockGenerateError.mockReset();
        (requestMockWithParams as FastifyRequest<{
            Params: Read<%= classify(name) %>Params;
        }>).params = new TestRead<%= classify(name) %>Params();
    });

    it('should create the <%= camelize(plural) %>Read route', async () => {
        <%= camelize(plural) %>Read(mockFastifyInstanceParameter, {}, () => {});
        expect(mockRoute).toHaveBeenCalled();
    });
    it('should return the <%= camelize(name) %>', async () => {
        mockFind<%= classify(name) %>.mockImplementation(() => new Test<%= classify(name) %>());
        const returnValue = await handler.call(
            mockFastifyInstanceParameter,
            requestMockWithParams as FastifyRequest<{ Params: Read<%= classify(name) %>Params }>,
            mockReply as MockFastifyReply<{ Params: Read<%= classify(name) %>Params }>
        );
        expect(mockFind<%= classify(name) %>).toHaveBeenCalled();
        expect(returnValue).toEqual(new TestResults<%= classify(name) %>());
    });
});
