import httpCodes from '@inip/http-codes';
import { mockFind<%= classify(plural) %> } from '@mocks/@app/routes/_shared';
import {
    mockCode,
    mockFastifyInstanceParameter,
    MockFastifyReply,
    mockGenerateError,
    mockReply,
    mockRoute,
    requestMockWithParams,
} from '@mocks/fastify';
import { mockEMRemove } from '@mocks/typeorm';
import {
    DeleteMultiple<%= classify(plural) %>Payload,
    OrgIDParam,
    TestDeleteMultiple<%= classify(plural) %>Payload,
    TestOrgIDParam,
} from '@start-bootstrap/website-shared-types';
import { Test<%= classify(name) %> } from '@testing/objects';
import { FastifyRequest } from 'fastify';

import { handler, <%= camelize(plural) %>DeleteMultiple } from './<%= dasherize(plural) %>-delete-multiple';

describe('<%= classify(plural) %>DeleteMultiple', () => {
    beforeEach(() => {
        mockFind<%= classify(plural) %>.mockReset();
        mockGenerateError.mockReset();
        (requestMockWithParams as FastifyRequest<{
            Params: OrgIDParam;
            Body: DeleteMultiple<%= classify(plural) %>Payload;
        }>).body = new TestDeleteMultiple<%= classify(plural) %>Payload();
        (requestMockWithParams as FastifyRequest<{
            Params: OrgIDParam;
            Body: DeleteMultiple<%= classify(plural) %>Payload;
        }>).params = new TestOrgIDParam();
    });

    it('should create the <%= camelize(plural) %>Delete route', async () => {
        <%= camelize(plural) %>DeleteMultiple(mockFastifyInstanceParameter, {}, () => {});
        expect(mockRoute).toHaveBeenCalled();
    });
    it('should delete multiple <%= camelize(plural) %>', async () => {
        mockFind<%= classify(plural) %>.mockImplementation(() => [new Test<%= classify(name) %>()]);
        const returnValue = await handler.call(
            mockFastifyInstanceParameter,
            requestMockWithParams as FastifyRequest<{
                Params: OrgIDParam;
                Body: DeleteMultiple<%= classify(plural) %>Payload;
            }>,
            mockReply as MockFastifyReply<{
                Params: OrgIDParam;
                Body: DeleteMultiple<%= classify(plural) %>Payload;
            }>
        );
        expect(mockFind<%= classify(plural) %>).toHaveBeenCalled();
        expect(mockCode).toHaveBeenCalledWith(204);
    });
    it('should catch errors when trying to remove <%= camelize(plural) %>', async () => {
        const thrownError = new Error('TEST_ERROR');
        mockFind<%= classify(plural) %>.mockImplementation(() => [new Test<%= classify(name) %>()]);
        mockEMRemove.mockImplementation(() => {
            throw thrownError;
        });
        try {
            const returnValue = await handler.call(
                mockFastifyInstanceParameter,
                requestMockWithParams as FastifyRequest<{
                    Params: OrgIDParam;
                    Body: DeleteMultiple<%= classify(plural) %>Payload;
                }>,
                mockReply as MockFastifyReply<{
                    Params: OrgIDParam;
                    Body: DeleteMultiple<%= classify(plural) %>Payload;
                }>
            );
        } catch (error) {
            expect(mockGenerateError).toHaveBeenLastCalledWith(
                httpCodes.INTERNAL_SERVER_ERROR,
                'ERROR_DELETING_<%= constantCase(name) %>',
                thrownError
            );
        }
    });
});
