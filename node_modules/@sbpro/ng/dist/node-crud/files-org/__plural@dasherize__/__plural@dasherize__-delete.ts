import { find<%= classify(name) %> } from '@app/routes/_shared';
import httpCodes from '@inip/http-codes';
import { RouteAuthConfig } from '@lib/orm/models';
import { RouteHandlerMethodForConfig } from '@src/augmentations/fastify';
import {
    Delete<%= classify(name) %>ErrorCodes,
    IDAndOrgIDParams,
    roleName,
} from '@start-bootstrap/website-shared-types';
import { FastifyPlugin } from 'fastify';
import { getConnection } from 'typeorm';

import * as schemas from './_schemas';

export const <%= camelize(plural) %>Delete: FastifyPlugin = async function (instance, options): Promise<void> {
    instance.route({
        method: 'DELETE',
        url: '/:id',
        schema: schemas.<%= camelize(plural) %>Delete,
        handler,
        config: <RouteAuthConfig>{ minRole: roleName.admin },
    });
};

export const handler: RouteHandlerMethodForConfig<{
    Params: IDAndOrgIDParams;
}> = async function (request, reply): Promise<undefined> {
    const delete<%= classify(name) %>Params: IDAndOrgIDParams = request.params;
    const entityManager = getConnection().manager;
    const found<%= classify(name) %> = await find<%= classify(name) %>(request, delete<%= classify(name) %>Params.id, {
        where: {
            organizationId: request.params.orgID,
        },
    });

    try {
        await entityManager.remove([found<%= classify(name) %>]);
    } catch (error) {
        throw request.generateError<Delete<%= classify(name) %>ErrorCodes>(
            httpCodes.INTERNAL_SERVER_ERROR,
            'ERROR_DELETING_<%= constantCase(name) %>',
            error
        );
    }

    reply.code(httpCodes.NO_CONTENT);
    return;
};
