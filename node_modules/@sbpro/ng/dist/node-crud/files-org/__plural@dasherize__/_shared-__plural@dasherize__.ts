import httpCodes from '@inip/http-codes';
import { <%= classify(name) %> } from '@lib/orm/entity';
import { FastifyRequestForParameter } from '@src/augmentations/fastify';
import {
    FindErrorCodes,
    Find<%= classify(plural) %>ErrorCodes,
    ReadMultiple<%= classify(plural) %>ErrorCodes,
    Read<%= classify(name) %>ErrorCodes,
    UUID,
} from '@start-bootstrap/website-shared-types';
import { FindManyOptions, FindOneOptions, getConnection } from 'typeorm';

export const find<%= classify(name) %> = async function (
    request: FastifyRequestForParameter,
    id: UUID,
    options?: FindOneOptions<<%= classify(name) %>>
): Promise<<%= classify(name) %>> {
    const <%= camelize(name) %>Repository = getConnection().getRepository(<%= classify(name) %>);
    let found<%= classify(name) %>: <%= classify(name) %> | undefined;

    if (!id) {
        throw request.generateError<FindErrorCodes>(
            httpCodes.INTERNAL_SERVER_ERROR,
            'NO_ID_FOR_FIND'
        );
    }

    try {
        found<%= classify(name) %> = await <%= camelize(name) %>Repository.findOne(id, options);
    } catch (error) {
        throw request.generateError<Read<%= classify(name) %>ErrorCodes>(
            httpCodes.INTERNAL_SERVER_ERROR,
            'ERROR_FINDING_<%= constantCase(name) %>',
            error
        );
    }

    if (!found<%= classify(name) %>) {
        throw request.generateError<Read<%= classify(name) %>ErrorCodes>(
            httpCodes.NOT_FOUND,
            '<%= constantCase(name) %>_NOT_FOUND'
        );
    }

    return found<%= classify(name) %>;
};

export const find<%= classify(plural) %> = async function (
    request: FastifyRequestForParameter,
    ids: UUID[],
    options?: FindManyOptions<<%= classify(name) %>>
): Promise<<%= classify(name) %>[]> {
    const <%= camelize(name) %>Repository = getConnection().getRepository(<%= classify(name) %>);
    let found<%= classify(plural) %>: <%= classify(name) %>[] | undefined;

    if (!ids || ids.length === 0) {
        throw request.generateError<FindErrorCodes>(
            httpCodes.INTERNAL_SERVER_ERROR,
            'NO_ID_FOR_FIND'
        );
    }

    try {
        found<%= classify(plural) %> = await <%= camelize(name) %>Repository.findByIds(ids, options);
    } catch (error) {
        throw request.generateError<ReadMultiple<%= classify(plural) %>ErrorCodes>(
            httpCodes.INTERNAL_SERVER_ERROR,
            'ERROR_FINDING_<%= constantCase(plural) %>',
            error
        );
    }

    if (!found<%= classify(plural) %>) {
        throw request.generateError<ReadMultiple<%= classify(plural) %>ErrorCodes>(
            httpCodes.NOT_FOUND,
            '<%= constantCase(plural) %>_NOT_FOUND'
        );
    }

    return found<%= classify(plural) %>;
};

export const find<%= classify(plural) %>Filter = async function (
    request: FastifyRequestForParameter,
    options?: FindManyOptions<<%= classify(name) %>>
): Promise<<%= classify(name) %>[]> {
    const <%= camelize(name) %>Repository = getConnection().getRepository(<%= classify(name) %>);
    let found<%= classify(plural) %>: <%= classify(name) %>[] | undefined;

    try {
        found<%= classify(plural) %> = await <%= camelize(name) %>Repository.find(options);
    } catch (error) {
        throw request.generateError<Find<%= classify(plural) %>ErrorCodes>(
            httpCodes.INTERNAL_SERVER_ERROR,
            'ERROR_FINDING_<%= constantCase(plural) %>',
            error
        );
    }

    if (!found<%= classify(plural) %>) {
        throw request.generateError<Find<%= classify(plural) %>ErrorCodes>(
            httpCodes.NOT_FOUND,
            '<%= constantCase(plural) %>_NOT_FOUND'
        );
    }

    return found<%= classify(plural) %>;
};
