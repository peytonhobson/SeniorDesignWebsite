import { mockFind<%= classify(plural) %>Filter } from '@mocks/@app/routes/_shared';
import {
    mockFastifyInstanceParameter,
    MockFastifyReply,
    mockGenerateError,
    mockReply,
    mockRoute,
    requestMock,
    requestMockWithParams,
} from '@mocks/fastify';
import {
    Find<%= classify(plural) %>Payload,
    OrgIDParam,
    TestFind<%= classify(plural) %>Payload,
    TestOrgIDParam,
} from '@start-bootstrap/website-shared-types';
import { Test<%= classify(name) %> } from '@testing/objects';
import { FastifyRequest } from 'fastify';

import { handler, <%= camelize(plural) %>Find } from './<%= dasherize(plural) %>-find';

describe('<%= classify(plural) %>Find', () => {
    beforeEach(() => {
        mockFind<%= classify(plural) %>Filter.mockReset();
        mockGenerateError.mockReset();
        (requestMockWithParams as FastifyRequest<{
            Params: OrgIDParam;
            Body: Find<%= classify(plural) %>Payload;
        }>).params = new TestOrgIDParam();
        (requestMockWithParams as FastifyRequest<{
            Params: OrgIDParam;
            Body: Find<%= classify(plural) %>Payload;
        }>).body = new TestFind<%= classify(plural) %>Payload();
    });

    it('should create the <%= camelize(plural) %>Find route', async () => {
        <%= camelize(plural) %>Find(mockFastifyInstanceParameter, {}, () => {});
        expect(mockRoute).toHaveBeenCalled();
    });
    it('should return the <%= camelize(name) %>', async () => {
        mockFind<%= classify(plural) %>Filter.mockImplementationOnce(() => [
            new Test<%= classify(name) %>(),
            new Test<%= classify(name) %>(),
            new Test<%= classify(name) %>(),
        ]);
        const returnValue = await handler.call(
            mockFastifyInstanceParameter,
            requestMockWithParams as FastifyRequest<{
                Params: OrgIDParam;
                Body: Find<%= classify(plural) %>Payload;
            }>,
            mockReply as MockFastifyReply<{ Params: OrgIDParam; Body: Find<%= classify(plural) %>Payload }>
        );
        expect(mockFind<%= classify(plural) %>Filter).toHaveBeenCalled();
        expect(returnValue.length).toEqual(3);
    });
    it('should add organizationId to any where queries', async () => {
        mockFind<%= classify(plural) %>Filter.mockImplementationOnce(() => [new Test<%= classify(name) %>()]);
        const returnValue = await handler.call(
            mockFastifyInstanceParameter,
            {
                ...(requestMockWithParams as FastifyRequest<{
                    Params: OrgIDParam;
                    Body: Find<%= classify(plural) %>Payload;
                }>),
                body: {
                    where: [{ a: 1 }],
                },
            },
            mockReply as MockFastifyReply<{ Params: OrgIDParam; Body: Find<%= classify(plural) %>Payload }>
        );
        expect(mockFind<%= classify(plural) %>Filter).toHaveBeenCalled();
        expect(returnValue.length).toEqual(1);
    });
});
