import { find<%= classify(plural) %> } from '@app/routes/_shared';
import { RouteAuthConfig } from '@lib/orm/models';
import { RouteHandlerMethodForConfig } from '@src/augmentations/fastify';
import {
    OrgIDParam,
    ReadMultiple<%= classify(plural) %>Payload,
    Results<%= classify(name) %>,
    roleName,
} from '@start-bootstrap/website-shared-types';
import { FastifyPlugin } from 'fastify';

import * as schemas from './_schemas';

export const <%= camelize(plural) %>ReadMultiple: FastifyPlugin = async function (
    instance,
    options
): Promise<void> {
    instance.route({
        method: 'POST',
        url: '/read-multiple',
        schema: schemas.<%= camelize(plural) %>ReadMultiple,
        handler,
        config: <RouteAuthConfig>{ minRole: roleName.editor },
    });
};

export const handler: RouteHandlerMethodForConfig<{
    Params: OrgIDParam;
    Body: ReadMultiple<%= classify(plural) %>Payload;
}> = async function (request, reply): Promise<Results<%= classify(name) %>[]> {
    const readMultiple<%= classify(plural) %>Payload: ReadMultiple<%= classify(plural) %>Payload = request.body;
    const found<%= classify(plural) %> = await find<%= classify(plural) %>(request, readMultiple<%= classify(plural) %>Payload.<%= camelize(name) %>IDs, {
        where: {
            organizationId: request.params.orgID,
        },
    });

    return found<%= classify(plural) %>.map((<%= camelize(name) %>) => <%= camelize(name) %>.toResults<%= classify(name) %>());
};
