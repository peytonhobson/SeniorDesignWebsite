import { find<%= classify(plural) %>Filter } from '@app/routes/_shared';
import { <%= classify(name) %> } from '@lib/orm/entity';
import { RouteAuthConfig } from '@lib/orm/models';
import { RouteHandlerMethodForConfig } from '@src/augmentations/fastify';
import { Find<%= classify(plural) %>Payload, OrgIDParam, Results<%= classify(name) %>, roleName } from '@start-bootstrap/website-shared-types';
import { FastifyPlugin } from 'fastify';
import { FindManyOptions } from 'typeorm';

import * as schemas from './_schemas';

export const <%= camelize(plural) %>Find: FastifyPlugin = async function (instance, options): Promise<void> {
    instance.route({
        method: 'POST',
        url: '/find',
        schema: schemas.<%= camelize(plural) %>Find,
        handler,
        config: <RouteAuthConfig>{ minRole: roleName.editor },
    });
};

export const handler: RouteHandlerMethodForConfig<{
    Params: OrgIDParam;
    Body: Find<%= classify(plural) %>Payload;
}> = async function (request, reply): Promise<Results<%= classify(name) %>[]> {
    const read<%= classify(name) %>Payload: Find<%= classify(plural) %>Payload = request.body;

    let where = read<%= classify(name) %>Payload.where;
    if (where) {
        where = where.map((searchTerms) => ({
            ...searchTerms,
            organizationId: request.params.orgID,
        }));
    }

    const found<%= classify(plural) %> = await find<%= classify(plural) %>Filter(request, {
        ...(read<%= classify(name) %>Payload as FindManyOptions<<%= classify(name) %>>),
        where,
    });

    return found<%= classify(plural) %>.map((<%= camelize(name) %>) => <%= camelize(name) %>.toResults<%= classify(name) %>());
};
