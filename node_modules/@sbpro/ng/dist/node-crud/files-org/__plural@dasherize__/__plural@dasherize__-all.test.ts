import { mockFind<%= classify(plural) %>Filter } from '@mocks/@app/routes/_shared';
import {
    mockFastifyInstanceParameter,
    MockFastifyReply,
    mockReply,
    mockRoute,
    requestMockWithParams,
} from '@mocks/fastify';
import { OrgIDParam, TestOrgIDParam } from '@start-bootstrap/website-shared-types';
import { Test<%= classify(name) %> } from '@testing/objects';
import { FastifyRequest } from 'fastify';

import { handler, <%= camelize(plural) %>All } from './<%= dasherize(plural) %>-all';

describe('<%= classify(plural) %>All', () => {
    beforeEach(() => {
        mockFind<%= classify(plural) %>Filter.mockReset();
        (requestMockWithParams as FastifyRequest<{
            Params: OrgIDParam;
        }>).params = new TestOrgIDParam();
    });

    it('should create the <%= camelize(plural) %>All route', async () => {
        <%= camelize(plural) %>All(mockFastifyInstanceParameter, {}, () => {});
        expect(mockRoute).toHaveBeenCalled();
    });

    it('should get all <%= camelize(plural) %>', async () => {
        mockFind<%= classify(plural) %>Filter.mockImplementationOnce(() => [
            new Test<%= classify(name) %>(),
            new Test<%= classify(name) %>(),
            new Test<%= classify(name) %>(),
        ]);
        const returnValue = await handler.call(
            mockFastifyInstanceParameter,
            requestMockWithParams as FastifyRequest<{ Params: OrgIDParam }>,
            mockReply as MockFastifyReply<{ Params: OrgIDParam }>
        );
        expect(mockFind<%= classify(plural) %>Filter).toHaveBeenCalled();
        expect(returnValue.length).toEqual(3);
    });
});
