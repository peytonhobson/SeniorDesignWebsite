{"version":3,"file":"ngx-autosize.js","sources":["ngx-autosize/lib/autosize.directive.ts","ngx-autosize/lib/autosize.module.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    ElementRef,\n    HostListener,\n    Directive,\n    Input,\n    NgZone, OnDestroy, OnChanges, AfterContentChecked, Output, EventEmitter\n} from '@angular/core';\n\nconst MAX_LOOKUP_RETRIES = 3;\n\n@Directive({\n    selector: '[autosize]'\n})\n\nexport class AutosizeDirective implements OnDestroy, OnChanges, AfterContentChecked {\n    @Input()\n    set minRows(value) {\n        this._minRows = value;\n        if (this.textAreaEl) {\n            this.textAreaEl.rows = value;\n        }\n    };\n    private _minRows: number;\n\n    @Input() maxRows: number;\n    @Input() onlyGrow = false;\n    @Input() useImportant = false;\n\n    @Output() resized = new EventEmitter<number>();\n\n    private retries = 0;\n    private textAreaEl: any;\n\n    private _oldContent: string;\n    private _oldWidth: number;\n\n    private _windowResizeHandler;\n    private _destroyed = false;\n\n    @HostListener('input', ['$event.target'])\n    onInput(textArea: HTMLTextAreaElement): void {\n        this.adjust();\n    }\n\n    constructor(\n        public element: ElementRef,\n        private _zone: NgZone\n    ) {\n        if (this.element.nativeElement.tagName !== 'TEXTAREA') {\n            this._findNestedTextArea();\n\n        } else {\n            this.textAreaEl = this.element.nativeElement;\n            this.textAreaEl.style.overflow = 'hidden';\n            this._onTextAreaFound();\n        }\n    }\n\n    ngOnDestroy() {\n        this._destroyed = true;\n        if (this._windowResizeHandler) {\n            window.removeEventListener('resize', this._windowResizeHandler, false);\n        }\n    }\n\n    ngAfterContentChecked() {\n        this.adjust();\n    }\n\n    ngOnChanges(changes) {\n        this.adjust(true);\n    }\n\n    _findNestedTextArea() {\n        this.textAreaEl = this.element.nativeElement.querySelector('TEXTAREA');\n\n        if (!this.textAreaEl && this.element.nativeElement.shadowRoot) {\n            this.textAreaEl = this.element.nativeElement.shadowRoot.querySelector('TEXTAREA');\n        }\n\n        if (!this.textAreaEl) {\n            if (this.retries >= MAX_LOOKUP_RETRIES) {\n                console.warn('ngx-autosize: textarea not found');\n\n            } else {\n                this.retries++;\n                setTimeout(() => {\n                    this._findNestedTextArea();\n                }, 100);\n            }\n            return;\n        }\n\n        this.textAreaEl.style.overflow = 'hidden';\n        this._onTextAreaFound();\n\n    }\n\n    _onTextAreaFound() {\n        this._addWindowResizeHandler();\n        setTimeout(() => {\n            this.adjust();\n        });\n    }\n\n    _addWindowResizeHandler() {\n        this._windowResizeHandler = Debounce(() => {\n            this._zone.run(() => {\n                this.adjust();\n            });\n        }, 200);\n\n        this._zone.runOutsideAngular(() => {\n            window.addEventListener('resize', this._windowResizeHandler, false);\n        });\n    }\n\n    adjust(inputsChanged = false): void {\n        if (!this._destroyed && this.textAreaEl) {\n\n            const currentText = this.textAreaEl.value;\n\n            if (\n                inputsChanged === false &&\n                currentText === this._oldContent &&\n                this.textAreaEl.offsetWidth === this._oldWidth\n            ) {\n                return;\n            }\n\n            this._oldContent = currentText;\n            this._oldWidth = this.textAreaEl.offsetWidth;\n\n            const clone = this.textAreaEl.cloneNode(true);\n            const parent = this.textAreaEl.parentNode;\n            clone.style.width = this.textAreaEl.offsetWidth + 'px';\n            clone.style.visibility = 'hidden';\n            clone.style.position = 'absolute';\n            clone.textContent = currentText;\n\n            parent.appendChild(clone);\n\n            clone.style.overflow = 'hidden';\n            clone.style.height = 'auto';\n\n            let height = clone.scrollHeight;\n\n            // add into height top and bottom borders' width\n            let computedStyle = window.getComputedStyle(clone, null);\n            height += parseInt(computedStyle.getPropertyValue('border-top-width'));\n            height += parseInt(computedStyle.getPropertyValue('border-bottom-width'));\n\n            const oldHeight = this.textAreaEl.offsetHeight;\n            const willGrow = height > oldHeight;\n\n            if (this.onlyGrow === false || willGrow) {\n                const lineHeight = this._getLineHeight();\n                const rowsCount = height / lineHeight;\n\n                if (this._minRows && this._minRows >= rowsCount) {\n                    height = this._minRows * lineHeight;\n\n                } else if (this.maxRows && this.maxRows <= rowsCount) {\n                    // never shrink the textarea if onlyGrow is true\n                    const maxHeight = this.maxRows * lineHeight;\n                    height = this.onlyGrow ? Math.max(maxHeight, oldHeight): maxHeight;\n                    this.textAreaEl.style.overflow = 'auto';\n\n                } else {\n                    this.textAreaEl.style.overflow = 'hidden';\n                }\n\n                const heightStyle = height + 'px';\n                const important = this.useImportant ? 'important' : '';\n\n                this.textAreaEl.style.setProperty('height', heightStyle, important);\n\n                this.resized.emit(height);\n            }\n\n            parent.removeChild(clone);\n        }\n    }\n\n    private _getLineHeight() {\n        let lineHeight = parseInt(this.textAreaEl.style.lineHeight, 10);\n        if (isNaN(lineHeight) && window.getComputedStyle) {\n            const styles = window.getComputedStyle(this.textAreaEl);\n            lineHeight = parseInt(styles.lineHeight, 10);\n        }\n\n        if (isNaN(lineHeight)) {\n            const fontSize = window.getComputedStyle(this.textAreaEl, null).getPropertyValue('font-size');\n            lineHeight = Math.floor(parseInt(fontSize.replace('px', ''), 10) * 1.5);\n        }\n\n        return lineHeight;\n    }\n}\n\nfunction Debounce(func, wait, immediate = false) {\n    let timeout;\n    return function () {\n        const context = this;\n        const args = arguments;\n        const later = function () {\n            timeout = null;\n            if (!immediate) {\n                func.apply(context, args);\n            }\n        };\n        const callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) {\n            func.apply(context, args);\n        }\n    };\n}\n","import { NgModule } from '@angular/core';\nimport { AutosizeDirective } from './autosize.directive';\n\n@NgModule({\n  declarations: [AutosizeDirective],\n  imports: [\n  ],\n  exports: [AutosizeDirective]\n})\nexport class AutosizeModule { }\n"]}