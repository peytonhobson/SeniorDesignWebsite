{"version":3,"file":"markdown.service.d.ts","sources":["markdown.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/// <reference types=\"marked\" />\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { InjectionToken, SecurityContext } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { Observable } from 'rxjs';\r\nimport { KatexOptions } from './katex-options';\r\nimport { MarkedOptions } from './marked-options';\r\nimport { MarkedRenderer } from './marked-renderer';\r\nexport declare const errorJoyPixelsNotLoaded = \"[ngx-markdown] When using the `emoji` attribute you *have to* include Emoji-Toolkit files to `angular.json` or use imports. See README for more information\";\r\nexport declare const errorKatexNotLoaded = \"[ngx-markdown] When using the `katex` attribute you *have to* include KaTeX files to `angular.json` or use imports. See README for more information\";\r\nexport declare const errorSrcWithoutHttpClient = \"[ngx-markdown] When using the `src` attribute you *have to* pass the `HttpClient` as a parameter of the `forRoot` method. See README for more information\";\r\nexport declare const SECURITY_CONTEXT: InjectionToken<SecurityContext>;\r\nexport declare class MarkdownService {\r\n    private platform;\r\n    private securityContext;\r\n    private http;\r\n    private sanitizer;\r\n    private readonly initialMarkedOptions;\r\n    private _options;\r\n    get options(): MarkedOptions;\r\n    set options(value: MarkedOptions);\r\n    get renderer(): MarkedRenderer;\r\n    set renderer(value: MarkedRenderer);\r\n    constructor(platform: Object, securityContext: SecurityContext, http: HttpClient, options: MarkedOptions, sanitizer: DomSanitizer);\r\n    compile(markdown: string, decodeHtml?: boolean, emojify?: boolean, markedOptions?: MarkedOptions): string;\r\n    getSource(src: string): Observable<string>;\r\n    highlight(element?: Element | Document): void;\r\n    renderKatex(html: string, options?: KatexOptions): string;\r\n    private decodeHtml;\r\n    private handleExtension;\r\n    private renderEmoji;\r\n    private trimIndentation;\r\n}\r\n"]}