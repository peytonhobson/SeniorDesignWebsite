import { AfterViewInit, ElementRef, EventEmitter, OnChanges } from '@angular/core';
import { KatexOptions } from './katex-options';
import { MarkdownService } from './markdown.service';
import * as ɵngcc0 from '@angular/core';
export declare class MarkdownComponent implements OnChanges, AfterViewInit {
    element: ElementRef<HTMLElement>;
    markdownService: MarkdownService;
    protected static ngAcceptInputType_emoji: boolean | '';
    protected static ngAcceptInputType_katex: boolean | '';
    protected static ngAcceptInputType_lineHighlight: boolean | '';
    protected static ngAcceptInputType_lineNumbers: boolean | '';
    data: string | undefined;
    src: string | undefined;
    get emoji(): boolean;
    set emoji(value: boolean);
    get katex(): boolean;
    set katex(value: boolean);
    katexOptions: KatexOptions | undefined;
    get lineHighlight(): boolean;
    set lineHighlight(value: boolean);
    line: string | string[] | undefined;
    lineOffset: number | undefined;
    get lineNumbers(): boolean;
    set lineNumbers(value: boolean);
    start: number | undefined;
    error: EventEmitter<string>;
    load: EventEmitter<string>;
    ready: EventEmitter<void>;
    private _emoji;
    private _katex;
    private _lineHighlight;
    private _lineNumbers;
    constructor(element: ElementRef<HTMLElement>, markdownService: MarkdownService);
    ngOnChanges(): void;
    ngAfterViewInit(): void;
    render(markdown: string, decodeHtml?: boolean): void;
    private coerceBooleanProperty;
    private handleData;
    private handleSrc;
    private handleTransclusion;
    private handlePlugins;
    private setPluginClass;
    private setPluginOptions;
    private toLispCase;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MarkdownComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MarkdownComponent, "markdown, [markdown]", never, { "emoji": "emoji"; "katex": "katex"; "lineHighlight": "lineHighlight"; "lineNumbers": "lineNumbers"; "data": "data"; "src": "src"; "katexOptions": "katexOptions"; "line": "line"; "lineOffset": "lineOffset"; "start": "start"; }, { "error": "error"; "load": "load"; "ready": "ready"; }, never, ["*"]>;
}

//# sourceMappingURL=markdown.component.d.ts.map